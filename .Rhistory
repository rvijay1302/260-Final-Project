filter(between(year(date), 2008, 2016)) %>%
summarise(rate= sum(outcome)/sum(population), .groups = "drop") %>%
ggplot(aes(x = factor(week), y =rate)) +
geom_boxplot()
View(weekly_counts)
weekly_counts %>% group_by (agegroup) %>%
filter(between(year(date), 2008, 2016)) %>%
summarise(rate= sum(outcome)/sum(population), .groups = "drop") %>%
ggplot(aes(x = factor(week), y =rate)) +
geom_boxplot()+
facet_wrap(~agegroup)
weekly_counts %>% group_by (week,agegroup) %>%
filter(between(year(date), 2008, 2016)) %>%
summarise(rate= sum(outcome)/sum(population), .groups = "drop") %>%
ggplot(aes(x = factor(week), y =rate)) +
geom_boxplot()+
facet_wrap(~agegroup)
weekly_counts %>% group_by (date,agegroup) %>%
filter(between(year(date), 2008, 2016)) %>%
summarise(rate= sum(outcome)/sum(population), .groups = "drop") %>%
ggplot(aes(x = date, y =rate)) +
geom_boxplot()+
facet_wrap(~agegroup)
weekly_counts %>% group_by (date,agegroup) %>%
filter(between(year(date), 2008, 2016)) %>%
summarise(rate= sum(outcome)/sum(population), .groups = "drop") %>%
ggplot(aes(x = date, y =rate)) +
geom_boxplot()+
facet_wrap(~agegroup, scale="free_Y")
weekly_counts %>% group_by (date,agegroup) %>%
filter(between(year(date), 2008, 2016)) %>%
summarise(rate= sum(outcome)/sum(population), .groups = "drop") %>%
ggplot(aes(x = date, y =rate)) +
geom_boxplot()+
facet_wrap(~agegroup, scale="free_y")
weekly_counts %>% group_by (date,agegroup) %>%
filter(between(year(date), 2008, 2016)) %>%
summarise(rate= sum(outcome)/sum(population), .groups = "drop") %>%
ggplot(aes(x = date, y =rate)) +
geom_boxplot()+
facet_wrap(~agegroup)
url <- "https://github.com/c2-d2/pr_mort_official/raw/master/data/Mortalidad-RegDem-2015-17-NYT-part1.pdf"
pdf <- pdf_text(url) |> str_split("\n")
?pdf_test
??pdf_test
library(pdftools)
pdf <- pdf_text(url) |> str_split("\n")
dat <- lapply(pdf, function(s){
s <- str_trim(s)
s <- str_remove_all(s, "Registro Demográfico - División de Calidad y Estadísticas Vitales")
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE) |> str_remove_all("\\*") |>
str_replace_all("Y(201\\d)", "\\1")
month <- tmp[1]
header <- tmp[-c(1,5)]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, ## take out first lines
which(n <= 3), ## lines with just one number (plot y-axis ) or 3 (legend)
which(n >= 20 & n <= 31), ## take out lines with numbers from plot x-axis
tail_index:length(s)) ## take out lines at end
if (month == "FEB") {
feb29 <- s[str_detect(s, "^29\\s+")] |> str_remove("29\\s+") |> parse_number()
}
s <- s[-out] |>
str_remove_all("[^\\d\\s]") |> ## remove things that are not digits or space
str_trim() |>
str_split_fixed("\\s+", n = 6)  ## split by any space
if (month == "DEC") {
header <- header[1:2]
s <- s[,1:3]
} else {
s <- s[,1:4]
}
colnames(s) <- c("day", header)
s <- s |> as_tibble() |>
mutate(month = month, day = as.numeric(day)) |>
pivot_longer(-c(day, month), names_to = "year", values_to = "deaths") |>
mutate(deaths = as.numeric(deaths), month = str_to_title(month)) |>
mutate(month = if_else(month == "Ago", "Aug", month)) |>
mutate(month = match(month, month.abb)) |>
mutate(date = make_date(year, month, day)) |>
select(date, deaths) |>
arrange(date)
if (month == "FEB") {
s <- bind_rows(s, data.frame(date = make_date(2016, 2, 29), deaths = feb29))
}
return(s)
})
dat <- do.call("bind_rows", dat) |> arrange(date)
View(dat)
nytimes <- load ("data/nytimes_table.RData")
View(nytimes_table)
View(pdf)
View(dat)
library(pdftools)
library(stringr)
library(readr)
library(tidyverse)
#reading in the file
temp_file <- tempfile()
url <- paste0("https://github.com/c2-d2/pr_mort_official/raw/master/data/Mortalidad-RegDem-2015-17-NYT-part1.pdf")
download.file(url, temp_file, mode = "wb")
txt <- pdf_text(temp_file)
file.remove(temp_file)
#wrangling
wrangling_sep <- function(n, month) {
page <- txt[n]
tab <- str_split(page, "\n+")
tab <- tab[[1]]
first_line <- tab[3]
first_line
the_month <- first_line %>%   str_trim() |>
str_replace_all(",\\s.", "") |>
str_split("\\s{2,}", simplify = TRUE)
header <- the_month[1:2] %>%  str_trim() |>
str_split("\\s+", simplify = TRUE)
header
the_names <- c(header[1,1], header[2,1], header[2,2], header[2,3], "Diff.")
new_table <- tab[4:37] |>
str_trim() |>
str_split("\\s{2,}", simplify = TRUE) |>
data.frame() |>
setNames(the_names)
new_table
new_table <- new_table %>% select(c("SEP", "Y2015", "Y2016", "Y2017", "Diff.")) %>%
filter(Y2015 != "" ,Y2015 != "Y2015")
return (new_table) }
# wrangling the rest
wrangling_pdf <- function(n, month) {
page <- txt[n]
split_lines <- str_split(page, "\n+")[[1]]
header_line <- split_lines[3]
the_month <- header_line %>%
str_trim() %>%
str_replace_all(",\\s.", "") %>%
str_split("\\s{2,}", simplify = TRUE)
header <- the_month[1:2] %>%
str_trim() %>%
str_split("\\s+", simplify = TRUE)
if (nrow(header) < 2 || ncol(header) < 4) {
stop("Header parsing failed: Ensure input format matches expectations.")
}
the_names <- c(header[1, 1], header[1, 2], header[1, 3], header[1, 4], header[2, 1])
new_table <- split_lines[4:43] %>%
str_trim() %>%
str_split("\\s{2,}", simplify = TRUE) %>%
data.frame(stringsAsFactors = FALSE) %>%
setNames(the_names)
colnames(new_table) <- str_replace_all(colnames(new_table), "\\*", "")
selected_columns <- c(month, "Y2015", "Y2016", "Y2017", "Diff.")
new_table <- new_table %>%
select(all_of(selected_columns)) %>%
filter(Y2017 != "", Y2016 != "")
new_table <- new_table %>%
filter(!is.na(new_table[[month]])) %>%  # Remove rows with NA in the 'month' column
filter(!str_detect(new_table[[month]], "Total|Avg"))
new_table <- new_table %>%
distinct(new_table[[month]], .keep_all = TRUE)
new_table <- new_table %>%  select(-"new_table[[month]]")
return(new_table)
}
#wrangling sep
SEP <- wrangling_sep(1, "SEP")
#wrangling other months
months <- c("OCT", "NOV", "DEC", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AGO")
numbers <- 2:12
sapply(1:length(months), function(i) {
result <- wrangling_pdf(numbers[i], months[i])
assign(months[i], result, envir = .GlobalEnv)
})
#additional wrangling for DEC
DEC <- DEC %>%  mutate (Diff.= Y2017, Y2017= NA)
#additional wrangling for OCT
OCT <- OCT %>%  mutate(OCT= as.numeric(OCT)) %>%  filter (!is.na(OCT))
library(purrr)
library(dplyr)
OCT <- OCT %>% mutate(month = "October")
NOV <- NOV %>% mutate(month = "November")
DEC <- DEC %>% mutate(month = "December")
JAN <- JAN %>% mutate(month = "January")
FEB <- FEB %>% mutate(month = "February")
MAR <- MAR %>% mutate(month = "March")
APR <- APR %>% mutate(month = "April")
MAY <- MAY %>% mutate(month = "May")
JUN <- JUN %>% mutate(month = "June")
JUL <- JUL %>% mutate(month = "July")
AGO <- AGO %>% mutate(month = "August")
SEP <- SEP %>% mutate(month = "September")
all_data <- bind_rows(SEP, OCT, NOV, DEC, JAN, FEB, MAR, APR,
MAY, JUN, JUL, AGO)
all_data <- all_data  %>% group_by(month) %>%  mutate(day=row_number()) %>% ungroup() %>%
select (Y2015, Y2016, Y2017, Diff., month, day)
all_data <- all_data  %>% group_by(month) %>%  mutate(day=row_number()) %>% ungroup() %>%
select (Y2015, Y2016, Y2017, month, day)
nytimes_table <- all_data %>% pivot_longer(-c(month,day)names_to = year, values_to = deaths)
nytimes_table <- all_data %>% pivot_longer(-c(month,day),names_to = year, values_to = deaths)
all_data <- all_data  %>% group_by(month) %>%  mutate(day=row_number()) %>% ungroup() %>%
select (Y2015, Y2016, Y2017, month, day) %>%
pivot_longer(-c(month, day), names_to = "year", values_to = "deaths")
View(all_data)
all_data <- all_data %>% mutate(year = gsub("Y", "", year)) %>%
mutate(date = make_date(year, month, day))
View(all_data)
all_data <- all_data %>% mutate(year = gsub("Y", "", year)) %>%
mutate(date = as.Date(paste(year, month, day, sep = "-"), format = "%Y-%b-%d"))
View(all_data)
all_data <- all_data %>% mutate(year = gsub("Y", "", year)) %>%
mutate(date = as.Date(paste(year, month, day, sep = "-"), format = "%Y-%b-%d")) %>%
select(-day, month, year)
View(all_data)
all_data <- all_data %>% mutate(year = gsub("Y", "", year)) %>%
mutate(date = as.Date(paste(year, month, day, sep = "-"), format = "%Y-%b-%d")) %>%
select(-day, month, year) %>%  filter(!(is.na(death)))
all_data <- all_data %>% filter(!(is.na(deaths)))
all_data <- all_data %>% filter(!(is.na(deaths))) %>%  arrange(date)
View(all_data)
all_data <- all_data %>% filter(!(is.na(deaths))) %>%  arrange(date) %>%  select(-c(day, month, year))
all_data <- all_data %>% filter(!(is.na(deaths))) %>%  arrange(date) %>%  select(-c(month, year))
save(all_data, file = "data/nytimes_table.RData")
all_data |> filter(date <= max(date) - days(45)) |>
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(title = "Deaths extracted from PDF shared with NYT",
subtitle = "Data for days after the hurricane are shown in red", x = "Date", y = "Deaths")
View(dat)
View(all_data)
all_data |> ggplot(aes(date, deaths)) + geom_point() +
labs(title = "Deaths extracted from PDF shared with NYT", x = "Date", y = "Deaths")
all_data <- all_data %>% filter(!(is.na(deaths))) %>%  arrange(date) %>%
select(-c(month, year)) %>%
mutate(death= as.numeric(death))
all_data <- all_data %>% filter(!(is.na(deaths))) %>%  arrange(date) %>%
mutate(death= as.numeric(death))
View(all_data)
all_data <- all_data %>% filter(!(is.na(deaths))) %>%  arrange(date) %>%
mutate(deaths= as.numeric(deaths))
View(all_data)
all_data <- all_data %>% filter(!(is.na(deaths))) %>%  arrange(date) %>%
mutate(deaths= as.numeric(deaths)) %>%  select(date, deaths)
save(all_data, file = "data/nytimes_table.RData")
View(all_data)
all_data |> ggplot(aes(date, deaths)) + geom_point() +
labs(title = "Deaths extracted from PDF shared with NYT", x = "Date", y = "Deaths")
all_data |> filter(date <= max(date) - days(45)) |>
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(title = "Deaths extracted from PDF shared with NYT",
subtitle = "Data for days after the hurricane are shown in red", x = "Date", y = "Deaths")
weekly_counts |> filter(date <= max(date) - days(45)) |>
ggplot(aes(yday(date), outcome, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(title = "Deaths extracted from PDF shared with NYT",
subtitle = "Data for days after the hurricane are shown in red", x = "Date", y = "Deaths")
weekly_counts |> filter(date <= max(date) - days(45), date>01-01-2016) |>
ggplot(aes(yday(date), outcome, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(title = "Deaths extracted from PDF shared with NYT",
subtitle = "Data for days after the hurricane are shown in red", x = "Date", y = "Deaths")
View(all_data)
weekly_counts |> filter(date <= max(date) - days(45), date>01-01-2016) |> group_by(date) %>%  summarise(deaths=sum(outcome)) %>%
ggplot(aes(yday(date), outcome, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(title = "Deaths extracted from PDF shared with NYT",
subtitle = "Data for days after the hurricane are shown in red", x = "Date", y = "Deaths")
View(weekly_counts)
weekly_counts |> filter(date <= max(date) - days(45), date>01-01-2016) |> group_by(date) %>%          summarise(deaths = sum(outcome)) %>%
ggplot(aes(yday(date), outcome, color = date < make_date(2017, 9, 20))) +
geom_point() +
theme_bw() +
labs(title = "Deaths extracted from PDF shared with NYT",
subtitle = "Data for days after the hurricane are shown in red", x = "Date", y = "Deaths")
weekly_counts |>
filter(date <= max(date) - days(45), date > make_date(2016, 1, 1)) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE)) %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +  # Use 'deaths' here instead of 'outcome'
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from PDF shared with NYT",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
weekly_counts |>
filter(date <= max(date) - days(45), date > make_date(2016, 1, 1)) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE)) %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +  # Use 'deaths' here instead of 'outcome'
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
library(excessmort)
daily_counts <- puerto_rico_counts %>% filter(between(year(date), 2016, 2018))
View(daily_counts)
daily_counts |>
filter(date <= max(date) - days(45), date > make_date(2016, 1, 1)) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE)) %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +  # Use 'deaths' here instead of 'outcome'
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
daily_counts |>
filter(date <= max(date) - days(45), date > make_date(2017, 1, 1)) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE)) %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +  # Use 'deaths' here instead of 'outcome'
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
tmp <- daily_counts |>
filter(date <= max(date) - days(45), date > make_date(2017, 1, 1)) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE))
View(tmp)
tmp <- daily_counts |>
filter(date <= max(date) - days(45), date > make_date(2017, 1, 1),date < make_date(2018, 1, 1) ) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE))
tmp %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +  # Use 'deaths' here instead of 'outcome'
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
tmp <- daily_counts |>
filter(date > make_date(2017, 1, 1),date < make_date(2018, 1, 1) ) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE))
tmp %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +  # Use 'deaths' here instead of 'outcome'
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
View(all_data)
View(tmp)
View(all_data)
tmp <- daily_counts |>
filter(date > make_date(2015, 1, 1),date < make_date(2018, 1, 1) ) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE))
tmp %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
tmp <- daily_counts |>
filter(date > make_date(2015, 1, 1),date < make_date(2018, 1, 1), date <= max(date) - days(45) ) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE))
tmp %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
View(all_data)
View(tmp)
daily_counts <- puerto_rico_counts %>% filter(between(year(date), 2015, 2018))
tmp <- daily_counts |>
filter(date > make_date(2015, 1, 1),date < make_date(2018, 1, 1), date <= max(date) - days(45) ) |>
group_by(date) %>%
summarise(deaths = sum(outcome, na.rm = TRUE))
tmp %>%
ggplot(aes(yday(date), deaths, color = date < make_date(2017, 9, 20))) +
geom_point(show.legend = FALSE) +
theme_bw() +
labs(
title = "Deaths extracted from excess mort package",
subtitle = "Data for days after the hurricane are shown in red",
x = "Day of the Year",
y = "Deaths"
)
View(tmp)
View(nytimes_table)
tmp2 <- all_data %>% mutate(date = floor_date(date, unit = "week", week_start = 3)) |>
group_by(date) |>
summarize(deaths = sum(deaths),
n = n(), .groups = "drop") |>
filter(n == 7) |>
select(-n) |>
mutate(week = epiweek(date)) |>
mutate(day = difftime(date, min(date), units = "day"),
week = as.factor(week))
View(tmp2)
View(weekly_counts)
View(tmp)
View(weekly_counts)
View(tmp)
View(tmp)
weekly_edited <- tmp %>%  mutate(date = floor_date(date, unit = "week", week_start = 3)) |>
group_by(date) |>
summarize(deaths = sum(deaths),
n = n(), .groups = "drop") |>
filter(n == 7) |>
select(-n) |>
mutate(week = epiweek(date)) |>
mutate(day = difftime(date, min(date), units = "day"),
week = as.factor(week))
combined_data <- bind_rows(tmp2,weekly_edited )  # Combine both datasets
ggplot(combined_data, aes(x = date, y = deaths, color = dataset)) +
geom_line() +
geom_point() +  # Optional: Add points for clarity
labs(title = "Deaths Comparison Over Time",
x = "Date",
y = "Deaths") +
theme_minimal()
tmp2 <- all_data %>% mutate(date = floor_date(date, unit = "week", week_start = 3)) |>
group_by(date) |>
summarize(deaths = sum(deaths),
n = n(), .groups = "drop") |>
filter(n == 7) |>
select(-n) |>
mutate(week = epiweek(date)) |>
mutate(day = difftime(date, min(date), units = "day"),
week = as.factor(week)) %>%   mutate(dataset= "dataset_1")
weekly_edited <- tmp %>%  mutate(date = floor_date(date, unit = "week", week_start = 3)) |>
group_by(date) |>
summarize(deaths = sum(deaths),
n = n(), .groups = "drop") |>
filter(n == 7) |>
select(-n) |>
mutate(week = epiweek(date)) |>
mutate(day = difftime(date, min(date), units = "day"),
week = as.factor(week)) %>%  mutate(dataset= "dataset_2")
combined_data <- bind_rows(tmp2,weekly_edited )  # Combine both datasets
ggplot(combined_data, aes(x = date, y = deaths, color = dataset)) +
geom_line() +
geom_point() +  # Optional: Add points for clarity
labs(title = "Deaths Comparison Over Time",
x = "Date",
y = "Deaths") +
theme_minimal()
ggplot(combined_data, aes(x = week, y = deaths, fill = dataset)) +
geom_bar(stat = "identity", position = "dodge") +  # 'dodge' for side-by-side bars
labs(title = "Total Deaths by Week",
x = "Week",
y = "Deaths") +
theme_minimal()
ggplot(combined_data, aes(x = factor(week), y = deaths, fill = dataset)) +
geom_boxplot() +
labs(title = "Distribution of Deaths by Week",
x = "Week",
y = "Deaths") +
theme_minimal()
ggplot(combined_data, aes(x = deaths_1, y = deaths_2)) +
geom_point(aes(color = date)) +
labs(title = "Comparison of Deaths in Both Datasets",
x = "Deaths (Dataset 1)",
y = "Deaths (Dataset 2)") +
theme_minimal()
combined_data1 <- merge(tmp1, weekly_edited, by = "date", suffixes = c("_1", "_2"))
combined_data1 <- merge(tmp2, weekly_edited, by = "date", suffixes = c("_1", "_2"))
ggplot(combined_data1, aes(x = deaths_1, y = deaths_2)) +
geom_point(aes(color = date)) +
labs(title = "Comparison of Deaths in Both Datasets",
x = "Deaths (Dataset 1)",
y = "Deaths (Dataset 2)") +
theme_minimal()
ggplot(combined_data, aes(x = deaths, fill = dataset)) +
geom_density(alpha = 0.5) +  # alpha for transparency
labs(title = "Density Plot of Deaths",
x = "Deaths",
y = "Density") +
theme_minimal()
ggplot(combined_data, aes(x = yday(date), y = deaths, color = dataset)) +
geom_point() +
facet_wrap(~week) +  # Facet by week (or day, depending on your data)
labs(title = "Comparison of Deaths by Week",
x = "Day of Year",
y = "Deaths") +
theme_minimal()
